<?php
	
defined('BASEPATH') OR exit('No direct script access allowed');
// This can be removed if you use __autoload() in config.php OR use Modular Extensions
/** @noinspection PhpIncludeInspection */
require APPPATH . '/libraries/REST_Controller.php';
require APPPATH . '/libraries/payfort/vendor/autoload.php';
require APPPATH.'/libraries/twilio-php-master/Twilio/autoload.php';
// Use the REST API Client to make requests to the Twilio REST API
use Twilio\Rest\Client;

// use namespace
//use Restserver\Libraries\REST_Controller;

/**
 * This is an example of a few basic user interaction methods you could use
 * all done with a hardcoded array
 *
 * @package         CodeIgniter
 * @subpackage      Rest Server
 * @category        Controller
 * @author          Phil Sturgeon, Chris Kacerguis
 * @license         MIT
 * @link            https://github.com/chriskacerguis/codeigniter-restserver
 */

class User extends REST_Controller 
{
	public function __construct()
	{
		parent::__construct();	
		//$headers = apache_request_headers();
		date_default_timezone_set('Asia/Kuwait');
	   $this->load->model('api/Common_model');
	   $this->load->model('api/User_model');	
	}
   
    public function resend_verification_token_post()
    { 
   		if($this->post())
        {
	         $id = $this->post('user_id');
	         $otp =  $this->Common_model->generate_token();    
	         $user=$this->Common_model->get_data_by_id('users','id',$id);
             
             if(!empty($user))
	         { 
	         	 $datas = array('otp' => $otp);
                 $update = $this->Common_model->update('users',$datas,'id',$id);
		         $message = array(
		                 
		            'success'=>'1',
		            'message' => 'تم إرسال رمز التحقق إلى رقم الجوال المسجل',
		        );
		         $this->set_response($message, REST_Controller::HTTP_OK); // CREATED (201) being the HTTP response code
	         	$name = urlencode($user['name']);
	         		$phone = urlencode(substr($user['phone'], 1));
	         		 $otp_message = urlencode("$otp يرجى استخدام رمز التحقق هذا للتحقق من تسجيل دخول مشرف. رمز التحقق هو $name مرحبا");
                     $date = urlencode(date('Y-m-d'));   
	         		

					//open connection
					$url = "http://ultramsg.com/api.php?send_sms&username=530090080&password=mansour12&numbers=$phone&sender=zemam&message=$otp_message&date=$date&time=23:01";
					      $ch = curl_init();
					      $timeout = 10;
					      curl_setopt($ch, CURLOPT_URL, $url);
					      curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);  
					      curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
					      $datas = curl_exec($ch);
					      curl_close($ch);
					      unset($datas);

	         	
	         }
	         else
	         {
	       	     $message = array(
		            'message'=>"!error",
		            'success'=>'0'
		         );
		         $this->set_response($message, REST_Controller::HTTP_OK); // CREATED (201) being the HTTP response code
	         }
        }
        else
        {
       		$message = array(
            'message' => 'please enter parameters', // Automatically generated by the model 
            );
            $this->set_response($message, REST_Controller::HTTP_OK); // CREATED (201) being the HTTP response code 
        }     
    }
    public function match_verification_token_post()
    {
    	if($this->post())
        {
	         $user_id = $this->post('user_id');
	         $token = $this->post('token');
	         $data = $this->User_model->match_verifaction_token($user_id,$token);
	         if(!empty($data))
	         {
	         	
		         $message = array(	           
		            'success'=>'1',
		            'message' => 'اكتمل التحقق بنجاح!',
		         );
		         $this->set_response($message, REST_Controller::HTTP_OK); // CREATED (201) being the HTTP response code
	         }
	         else
	         {
	       	     $message = array(
		            'message'=>"sorry your verification token does not match!",
		            'success'=>'0'
		         );
		         $this->set_response($message, REST_Controller::HTTP_OK); // CREATED (201) being the HTTP response code
	         }
        }
        else
        {
       		$message = array(
            'message' => 'please enter parameters', // Automatically generated by the model 
            );
            $this->set_response($message, REST_Controller::HTTP_OK); // CREATED (201) being the HTTP response code 
        }     
    }
    public function user_login_post()
    { 
   		if($this->post())
        {
	        $phone = $this->post('phone');
	       // $phone = substr($phone_no, 4);
	         $data = $this->User_model->login($phone);
	        //echo $this->db->last_query();die;
	         $otp =  $this->Common_model->generate_token();
	         if(!empty($data))
	         {

	         	$datas = array('reg_id' => $this->post('reg_id'),'device_type' => $this->post('device_type'),'otp'=>$otp);
                $update = $this->Common_model->update('users',$datas,'id',$data['id']);
	         	if(!empty($data['image']))
	         	{
	         		$image = base_url().'uploads/users/'.$data['image'];
	         	}else{
	         		$image = "";
	         	}
	         	
		         $message = array(
		            'id'=>$data['id'],
		            'name' => $data['name'],
		            'phone' => $data['phone'],
		            'user_type' => $data['user_type'],
		            'email' => $data['email'],
		            'otp' => $otp,
		            'phone_verified' => $data['phone_verified'],
		            'image' => $image,
		            'success'=>'1',
		            'message' => 'تم تسجيل الدخول بنجاح',
		         );
		         $this->set_response($message, REST_Controller::HTTP_OK); // CREATED (201) being the HTTP response code
		       
	         		$name = urlencode($data['name']);
	         		$phone = urlencode(substr($data['phone'], 1));
	         		 $otp_message = urlencode("Hii $name Moshref Verification token is $otp");
                     $date = urlencode(date('Y-m-d'));   
	         		

					//open connection
					$url = "http://ultramsg.com/api.php?send_sms&username=530090080&password=mansour12&numbers=$phone&sender=zemam&message=$otp_message&date=$date&time=23:01";
					      $ch = curl_init();
					      $timeout = 10;
					      curl_setopt($ch, CURLOPT_URL, $url);
					      curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout); 
					      curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
					      $datas = curl_exec($ch);
					      curl_close($ch);
					//echo $data;die;
					      unset($datas);
	         	
	         }
	         else
	         {
	       	     $message = array(
		            'message'=>"تسجيل الدخول غير صالح، الرجاء إعادة المحاولة",
		            'success'=>'0'
		         );
		         $this->set_response($message, REST_Controller::HTTP_OK); // CREATED (201) being the HTTP response code
	         }
        }
        else
        {
       		$message = array(
            'message' => 'please enter parameters', // Automatically generated by the model 
            );
            $this->set_response($message, REST_Controller::HTTP_OK); // CREATED (201) being the HTTP response code 
        }     
    }
    public function forgot_password_post()
    {
    	if($this->post())
        {
        	$api_keys = array(
			    "secret_key" => "test_sec_k_932a7505fdd7066fafb8a",
			    "open_key"   => "test_open_k_b8a021e325c953e31239"
			);
	    	 $phone=$this->post('phone');
	         $check_phone = $this->Common_model->get_data_by_id('user','phone',$phone);
	         if(empty($check_phone))
	         {
	             	$message = array(
					            'message' => 'المستخدم غير موجود',
					            'success'=>'0' 
	                          );
	            $this->set_response($message, REST_Controller::HTTP_OK); // CREATED (201) being the HTTP response code 
	         }
	         else
	         {
	         	$password = substr(uniqid(rand(), True), 0, 6);
	             
		         $data = array(
		                   'password' => md5($password)
		                  );
		         $update = $this->Common_model->update('user',$data,'phone',$phone);
		         if($update)
		         {
		         	$AccountSid = "ACc220337950c56333449bba407e2e9956"; // Your Account SID from www.twilio.com/console
				$AuthToken = "9058ba07b898cbb116c9218561778312";   // Your Auth Token from www.twilio.com/console
				$client = new Client($AccountSid, $AuthToken);
				$message = $client->account->messages->create(
					$phone,
						 array(
						 'from' => "+18447588710",
						 'body' => "Hello ". $check_phone['first_name']." your new password here ".$password,
						 )
					);


		         	$message = array(
				            'message'=>'تم إرسال مكتب المدعي العام إلى رقم الجوال المسجل',
				            'success'=>'1'
				         );
		           $this->set_response($message, REST_Controller::HTTP_OK); // CREATED (201) being the HTTP response code	
		         }
		         else
		         {
		         	$message = array(
		            'message' => 'some error occured', // Automatically generated by the model 
		           );
		            $this->set_response($message, REST_Controller::HTTP_OK); // CREATED (201) being the HTTP response code 
		        }
	          } 
         }
         else
         {
         	$message = array(
            'message' => 'please enter parameters', // Automatically generated by the model 
            );
            $this->set_response($message, REST_Controller::HTTP_OK);
         }
    }
    public function get_profile_post()
    {
    	if($this->post())
        {
	    	$id=$this->post('user_id');
	    	$limit = 20; 
           $start_from = ($this->post('page')-1) * $limit;
      
	    	$data=$this->Common_model->get_data_by_id('users','id',$id);
	    	if(!empty($data))
	    	{
	    		if(!empty($data['image']))
	    		{
	    			$data['image'] = base_url().'uploads/users/'.$data['image'];
	    		}
	    		else
	    		{
	    			$data['image'] = "";
	    		}
	    	$posts=$this->User_model->user_timeline($id,$start_from,$limit);
		    if(!empty($posts))
		    {           
            foreach($posts as $post)
            {
              
               
                if($post['user_image'] != '')
                {
                    $post['user_image'] = base_url().'uploads/users/'.$post['user_image'];
                }
                else
                {
                  $post['user_image'] = "";
                }
                if($post['attachment'] != '')
                {
                    $post['attachment'] = base_url().'uploads/post/'.$post['attachment'];
                }
                else
                {
                  $post['attachment'] = "";
                }
                if($post['thumbnail'] != '')
                {
                    $post['thumbnail'] = base_url().'uploads/post/thumbnail/'.$post['thumbnail'];
                }
                else
                {
                  $post['thumbnail'] = "";
                }
                $query = $this->db->get_where('post_likes', array('post_id' => $post['id'],'user_id'=>$this->input->post('user_id'),'status'=> '1'));
                $check_like = $query->row_array();
                if(!empty($check_like))
                {
                	$post['like_status'] = '1';
                }
                else
                {
                	$post['like_status'] = '0';
                }
         		$post['like_count'] = $this->db->get_where('post_likes', array('post_id' => $post['id'],'status'=> '1'))->num_rows();
         		$post['comment_count'] = $this->db->get_where('post_comments', array('post_id' => $post['id']))->num_rows();
        		$post['reply_count'] = $this->db->get_where('comment_replies', array('post_id' => $post['id']))->num_rows();
                $coments = $this->User_model->post_comments($post['id']);
                if(!empty($coments))
                {
	            	foreach ($coments as $key => $coment) 
	            	{
						if($coment['comment_user_image'] != '')
		                {
		                    $coment['comment_user_image'] = base_url().'uploads/users/'.$coment['comment_user_image'];
		                }
		                else
		                {
		                  $coment['comment_user_image'] = "";
		                }
		                $post['comment_list'][] = $coment;
	            	}
            	}
            	else
            	{
            		$post['comment_list'] = [];
            	}
            	
             	$data['timeline'][] =$post;           
            }                          
        }
        else
        {
           $data['timeline'] = [];    
        }
	    		$message = array('success' => '1','message'=>'user detail found','details'=>$data);
	    		
	    	}
	    	else
	    	{
	    		$message = array(
			            'message'=>"المستخدم غير موجود",
			            'success'=>'0'
			         );
			        
	    	 } 
         }
    	 else
         {
         	$message = array(
            'message' => 'please enter parameters',
            );
            
         }
          $this->set_response($message, REST_Controller::HTTP_OK);
    }
    public function update_profile_post()
    {
    	if($this->post())
        {
	    	
	    	$id=$this->post('user_id');
	    	if(isset($_FILES["image"]))
	    	{
		    	$name= time().'_'.$_FILES["image"]["name"];
		        $tmp_name=$_FILES["image"]["tmp_name"];
		        $error=$_FILES["image"]["error"];

	        	$path='uploads/users/'.$name;
		        move_uploaded_file($tmp_name,$path);
		        $data = array(
				'image'=> $name,
				'name' => $this->post('name'),
	            'bio' => $this->post('bio'),
				);
		    }
		    else
		    {
		    	$data = array(
				'name' => $this->post('name'),
	            'bio' => $this->post('bio'),
			);
		    }
		    $update = $this->Common_model->update('users',$data,'id',$id);
		    if($update)
		    {
		        $data=$this->Common_model->get_data_by_id('users','id',$id);
		    	
		    		if(!empty($data['image']))
		    		{
		    			$image = base_url().'uploads/users/'.$data['image'];
		    		}
		    		else
		    		{
		    			$image = "";
		    		}
		    		$data['image'] = $image;
		    		$data['message'] = 'تم تحديث ملفك الشخصي بنجاح';
		    		$data['success'] = '1';	  
			        $this->set_response($data, REST_Controller::HTTP_OK);
			}
			else
		    {
		    	$message = array(
		            'message' => 'some error occured', // Automatically generated by the model 
		            );
		            $this->set_response($message, REST_Controller::HTTP_NOT_FOUND);
			}			   
        }
        else
        {
        	$message = array(
            'message' => 'please enter parameters', // Automatically generated by the model 
            );
            $this->set_response($message, REST_Controller::HTTP_OK);
        }
    }
    public function update_fcm_token_post()
    {
    	if($this->post())
        {	    	
	    	$id=$this->post('user_id');	   
		    $data = array(
				'reg_id' => $this->post('reg_id'),
			);
		   
		    $update = $this->Common_model->update('users',$data,'id',$id);
		    if($update)
		    {
		        
	    		$data['message'] = 'fcm token update successfully.';
	    		$data['success'] = '1';	  
		        $this->set_response($data, REST_Controller::HTTP_OK);
			}
			else
		    {
		    	$message = array(
		            'message' => 'some error occured', // Automatically generated by the model 
		            );
		            $this->set_response($message, REST_Controller::HTTP_NOT_FOUND);
			}			   
        }
        else
        {
        	$message = array(
            'message' => 'please enter parameters', // Automatically generated by the model 
            );
            $this->set_response($message, REST_Controller::HTTP_OK);
        }
    }
    public function classes_list_get()
    { 
    	$data = $this->Common_model->get_data('classes');
    	if(!empty($data))
    	{
    		$message = array('sucess'=>'1','message'=> 'تم العثور على الفصول الدراسية'); 
    		$message['classes_list'] = $data;
    	}
    	else
    	{
    		$message = array('sucess'=>'0','message'=> 'قائمة فئة فارغة'); 
    	}
   		$this->set_response($message, REST_Controller::HTTP_OK);     
    }
    public function areas_list_get()
    { 
    	$data = $this->User_model->get_cities();
    	if(!empty($data))
    	{
    		$message = array('sucess'=>'1','message'=> 'وقد تم تأسيس قائمة المنطقة بنجاح'); 
    		$message['areas_list'] = $data;
    	}
    	else
    	{
    		$message = array('sucess'=>'0','message'=> 'فارغة قائمة المنطقة'); 
    	}
   		$this->set_response($message, REST_Controller::HTTP_OK);     
    }
    public function gender_list_get()
    { 
    	$data = $this->User_model->get_genders();
    	if(!empty($data))
    	{
    		$message = array('sucess'=>'1','message'=> 'وقد تم تأسيس قائمة المنطقة بنجاح'); 
    		$message['gender_list'] = $data;
    	}
    	else
    	{
    		$message = array('sucess'=>'0','message'=> 'فارغة قائمة المنطقة'); 
    	}
   		$this->set_response($message, REST_Controller::HTTP_OK);     
    }
     public function level_list_get()
    { 
    	$data = $this->User_model->get_levels();
    	if(!empty($data))
    	{
    		$message = array('sucess'=>'1','message'=> 'وقد تم تأسيس قائمة المنطقة بنجاح'); 
    		$message['level_list'] = $data;
    	}
    	else
    	{
    		$message = array('sucess'=>'0','message'=> 'فارغة قائمة المنطقة'); 
    	}
   		$this->set_response($message, REST_Controller::HTTP_OK);     
    }
    public function schools_list_post()
    { 
        if(empty($this->post('area_name')) and empty($this->post('gender')) and empty($this->post('level')))
   		{
    		$data = $this->db->get_where('schools')->result_array();
    	}
    	elseif(!empty($this->post('area_name')) and empty($this->post('gender')))
    	{
    		$data = $this->db->get_where('schools', array('city' => $this->post('area_name')))->result_array();
    	}
    	elseif(empty($this->post('area_name')) and !empty($this->post('gender')))
    	{
    		$data = $this->db->get_where('schools', array('gender' => $this->post('gender')))->result_array();
    	}
    	elseif(!empty($this->post('area_name')) and !empty($this->post('gender')) and !empty($this->post('gender')))
    	{
    		$data = $this->db->get_where('schools', array('gender' => $this->post('gender'),'city' => $this->post('area_name'),'level' => $this->post('level')))->result_array();
    	}
    	if(!empty($data))
    	{
    		$message = array('sucess'=>'1','message'=> 'قائمة المدارس وجدت'); 
    		foreach ($data as $key => $datas) {
    			if(!empty($datas['image']))
    			{
    			$datas['image'] = base_url().'uploads/schools/'.$datas['image'];
    			}
    			else
    			{
    				$datas['image'] = "";
    			}
    			$message['schools_list'][] = $datas;
    		}
    		
    	}
    	else
    	{
    		$message = array('sucess'=>'0','message'=> 'قائمة المدارس الفارغة'); 
    	}
   		$this->set_response($message, REST_Controller::HTTP_OK);     
    }
    public function rating_questions_list_get() 
    { 
    	$data = $this->Common_model->get_data('rating_questions');
    	if(!empty($data))
    	{
    		$message = array('sucess'=>'1','message'=> 'تم العثور على أسئلة إيفلواتيون'); 
    		foreach ($data as $key => $datas) {
    			
    			$message['rating_questions_list'][] = $datas;
    		}
    		
    	}
    	else
    	{
    		$message = array('sucess'=>'0','message'=> 'قائمة أسئلة التقييم فارغة'); 
    	}
   		$this->set_response($message, REST_Controller::HTTP_OK);     
    }
    public function leaders_list_post()
    { 
    	if(empty($this->post('school_id')))
    	{
    		$data = $this->db->get_where('users', array('user_type' => 'leader'))->result_array();
    	}
    	else
    	{
    		$data = $this->db->get_where('users', array('user_type' => 'leader','school_id'=>$this->post('school_id')))->result_array();
    	}
    	
    	if(!empty($data))
    	{
    		$message = array('sucess'=>'1','message'=> 'وجد القادة'); 
    		foreach ($data as $key => $datas) {
    			
    			//$datas['image'] = base_url().'uploads/schools/'.$datas['image'];
    			$message['leaders_list'][] = $datas;
    		}
    		
    	}
    	else
    	{
    		$message = array('sucess'=>'0','message'=> 'قائمة القادة الفارغة'); 
    	}
   		$this->set_response($message, REST_Controller::HTTP_OK);     
    }
    public function notification_list_post()
    {   	
    	$result = $this->db->get_where('notifications', array('user_id' => $this->post('user_id')))->result_array();
    	$data = array_reverse($result); 
    	if(!empty($data))
    	{
    		$message = array('sucess'=>'1','message'=> 'تم العثور على إشعارات'); 
    		foreach ($data as $key => $datas) {
    			
    			$sender_detail = $this->Common_model->get_data_by_id('users','id',$datas['sender_id']);
    			if(!empty($sender_detail['image']))
    			{
    				$sender_detail['image'] = base_url().'uploads/users/'.$sender_detail['image'];
    			}
    			else
    			{
    				$sender_detail['image'] = "";
    			}
    			$datas['image'] = $sender_detail['image'];

    			$time = $datas['created'];
                $val = date('A', strtotime($time));
                if($val == 'AM')
                {
                	$value = 'PM';
                }
                else
                {
                	$value = 'AM';
                }
                $datas['time'] =  date('h:i', strtotime($time));
                $datas['time'] =  $datas['time'].' '. $value;

    			$message['notifications_list'][] = $datas;
    		}
    		
    	}
    	else
    	{
    		$message = array('sucess'=>'0','message'=> 'لم يتم العثور على إشعارات'); 
    	}
   		$this->set_response($message, REST_Controller::HTTP_OK);     
    }
    public function visit_list_post()
    {
    	if($this->post('user_type') == 'moshref')
    	{
    		$data = $this->db->get_where('plans', array('user_id' => $this->post('user_id')))->result_array();
    	} 
    	elseif($this->post('user_type') == 'teacher')
    	{
    		$data = $this->db->get_where('plans', array('teacher_id' => $this->post('user_id')))->result_array();
    	}   	
    	elseif($this->post('user_type') == 'leader')
    	{
    		$leader_detail = $this->Common_model->get_data_by_id('users','id',$this->post('user_id'));
    		$data = $this->db->get_where('plans', array('teacher_id' => $leader_detail['teacher_id']))->result_array();
    	}  	
    	if(!empty($data))
    	{
    		$message = array('sucess'=>'1','message'=> 'تم العثور على قائمة الخطط'); 
    		foreach ($data as $key => $datas) {
    			
    			if($this->post('user_type') == 'moshref')
    			{
	    			$teacher_detail = $this->Common_model->get_data_by_id('users','id',$datas['teacher_id']);
	    			if(!empty($teacher_detail['image']))
	    			{
	    				$teacher_detail['image'] = base_url().'uploads/users/'.$teacher_detail['image'];
	    			}
	    			else
	    			{
	    				$teacher_detail['image'] = "";
	    			}
	    			$datas['user_image'] = $teacher_detail['image'];
	    			$datas['user_name'] = $teacher_detail['name'];
	    		}
	    		elseif($this->post('user_type') == 'teacher')
    			{
	    			$user_detail = $this->Common_model->get_data_by_id('users','id',$datas['user_id']);
	    			if(!empty($user_detail['image']))
	    			{
	    				$user_detail['image'] = base_url().'uploads/users/'.$user_detail['image'];
	    			}
	    			else
	    			{
	    				$user_detail['image'] = "";
	    			}
	    			$datas['user_image'] = $user_detail['image'];
	    			$datas['user_name'] = $user_detail['name'];
	    		}
	    		elseif($this->post('user_type') == 'leader')
    			{
	    			$user_detail = $this->Common_model->get_data_by_id('users','id',$datas['user_id']);
	    			if(!empty($user_detail['image']))
	    			{
	    				$user_detail['image'] = base_url().'uploads/users/'.$user_detail['image'];
	    			}
	    			else
	    			{
	    				$user_detail['image'] = "";
	    			}
	    			$datas['user_image'] = $user_detail['image'];
	    			$datas['user_name'] = $user_detail['name'];
	    		}

    			//$datas['image'] = base_url().'uploads/schools/'.$datas['image'];

    			$message['plan_list'][] = $datas;
    		}   		
    	}
    	else
    	{
    		$message = array('sucess'=>'0','message'=> 'قائمة خطط فارغة'); 
    	}
   		$this->set_response($message, REST_Controller::HTTP_OK);     
    }
    public function subject_list_post() 
    { 
   		if($this->post())
        {
        	
		   	$data = $this->db->get_where('subjects', array('class_id =' => $this->post('class_id')))->result_array();
	    	if(!empty($data))
	    	{
	    		$message = array('sucess'=>'1','message'=> 'تم العثور على قائمة الموضوعات'); 
	    		$message['subject_list'] = $data;
	    	}
	    	else
	    	{
	    		$message = array('sucess'=>'0','message'=> 'قائمة الموضوعات الفارغة'); 
	    	}
	   		
			         
	        }
        else
        {
       		$message = array(
            'message' => 'please enter parameters',
            'success'=>'0' 
            );
        }
        $this->set_response($message, REST_Controller::HTTP_OK);      
    } 
    public function teachers_list_post() 
    { 

   		if(empty($this->post('leader_id')))
   		{
	   		$data = $this->db->get_where('users', array('user_type =' => 'teacher','forigen_id'=>$this->post('user_id')))->result_array();
	    }
	    else
	    {
	    	$data = $this->db->get_where('users', array('user_type' => 'teacher','leader_id'=>$this->post('leader_id'),'forigen_id'=>$this->post('user_id')))->result_array();
	    }
    	if(!empty($data))
    	{
    		$message = array('sucess'=>'1','message'=> 'قائمة المعلمين وجدت'); 
    		$message['teacher_list'] = $data;
    	}
    	else
    	{
    		$message = array('sucess'=>'0','message'=> 'قائمة المعلمين الفارغة'); 
    	}
        $this->set_response($message, REST_Controller::HTTP_OK);      
    }
    public function inbox_list_post() 
    {
	    $datas = $this->User_model->inbox_list($this->post('user_id'));
	    // echo  $this->db->last_query();die; 
    	if(!empty($datas))
    	{
    		$message = array('sucess'=>'1','message'=> 'تم العثور على قائمة البريد الوارد'); 
              foreach($datas as $data)
              {
              	$data['unread_message_count'] = $this->db->get_where('unread_messages', array('group_id' => $data['group_id'],'member_id'=>$this->post('user_id'),'read_status'=> '0'))->num_rows();

              	if(!empty($data['school_image']))
				{
					$data['school_image'] = base_url().'uploads/schools/'.$data['school_image'];
				}
				else
				{
					$data['school_image'] = "";	
				}
              
              	$message['inbox_list'][] = $data;
              }  

    		
    	}
    	else
    	{
    		$message = array('sucess'=>'0','message'=> 'إفراغ البريد الوارد'); 
    	}
        $this->set_response($message, REST_Controller::HTTP_OK);      
    }
    public function conversation_list_post() 
    {
	    $datas = $this->User_model->conversation_list($this->post('group_id'));
	    $group_detail = $this->Common_model->get_data_by_id('groups','id',$this->post('group_id'));
	    $school_detail = $this->Common_model->get_data_by_id('schools','id',$group_detail['school_id']);
	   // echo  $this->db->last_query();die; 
    	if(!empty($datas))
    	{
    		$message = array('sucess'=>'1','message'=> 'تم العثور على دردشة سابقة','school_name'=>$group_detail['group_name']); 
    		$members = $this->User_model->member_list($this->post('group_id'));
    			foreach($members as $member)
    			{
    				if(!empty($member['image']))
    				{
    					$member['image'] = base_url().'uploads/users/'.$member['image'];
    				}
    				else
    				{
    					$member['image'] = "";	
    				}
    				$message['member_list'][] = $member;
    			}
             
    		foreach ($datas as $key => $data) 
    		{
    		                       
                $sender_detail = $this->Common_model->get_data_by_id('users','id',$data['user_id']);
    			if(!empty($sender_detail['image']))
    			{
    				$data['image'] = base_url().'uploads/users/'.$sender_detail['image'];
    			}
    			else
    			{
    				$data['image'] = "";
    			}
    			$time = $data['created'];
                $val = date('A', strtotime($time));
                if($val == 'AM')
                {
                	$value = 'PM';
                }
                else
                {
                	$value = 'AM';
                }
                $data['time'] =  date('h:i', strtotime($time));
                $data['time'] =  $data['time'].' '. $value;


                $check_read_status = $this->db->get_where('unread_messages', array('message_id' => $data['id'],'member_id'=>$this->input->post('user_id'),'read_status'=> '0'))->row_array();
                if(!empty($check_read_status))
                {
                	$data['read_status'] = "0";
                }
                else
                {
                	$data['read_status'] = "1";	
                }
                $read_data = array('read_status' => '1');
                $this->db->where('message_id', $data['id']);
             
                $this->db->where('member_id', $this->input->post('user_id'));
        		$this->db->update('unread_messages', $read_data);
    			$message['conversation_list'][] = $data;

    		}

    	}
    	else
    	{
    		$message = array('sucess'=>'0','message'=> 'ليس لديك أي دردشة سابقة'); 
    	}
        $this->set_response($message, REST_Controller::HTTP_OK);      
    }
    public function group_list_post() 
    { 
  		$datas = $this->User_model->group_list($this->post('user_id'));	    
    	if(!empty($datas))
    	{
    		$message = array('sucess'=>'1','message'=> 'تم العثور على قائمة المجموعات'); 
    		$i = '1';
    		foreach ($datas as $key => $data) {

    			$data['group_name'] = 'Group_discussion_'.$i;
    			$members = $this->User_model->member_list($data['group_id']);
    			foreach($members as $member)
    			{
    				if(!empty($member['image']))
    				{
    					$member['image'] = base_url().'uploads/users/'.$member['image'];
    				}
    				else
    				{
    					$member['image'] = "";	
    				}
    				$data['member_list'][] = $member;
    			}
    				$i++;
    				$message['group_list'][] = $data;
    			}	
    		}
    	else
    	{
    		$message = array('sucess'=>'0','message'=> 'قائمة المجموعات الفارغة'); 
    	}
        $this->set_response($message, REST_Controller::HTTP_OK);      
    } 
    public function post_list_post()
    {
        $limit = 20; 
        $start_from = ($this->post('page')-1) * $limit;
        $posts=$this->User_model->post_list($start_from,$limit);
        if(!empty($posts))
        {
            $message = [
                        'message' => 'تم العثور على قائمة المشاركات',
                        'success'=>'1'
                           ];
            foreach($posts as $post)
            {
              
               
                if($post['user_image'] != '')
                {
                    $post['user_image'] = base_url().'uploads/users/'.$post['user_image'];
                }
                else
                {
                  $post['user_image'] = "";
                }
                if($post['attachment'] != '')
                {
                    $post['attachment'] = base_url().'uploads/post/'.$post['attachment'];
                }
                else
                {
                  $post['attachment'] = "";
                }
                if($post['thumbnail'] != '')
                {
                    $post['thumbnail'] = base_url().'uploads/post/thumbnail/'.$post['thumbnail'];
                }
                else
                {
                  $post['thumbnail'] = "";
                }
                $query = $this->db->get_where('post_likes', array('post_id' => $post['id'],'user_id'=>$this->input->post('user_id'),'status'=> '1'));
                $check_like = $query->row_array();
                if(!empty($check_like))
                {
                	$post['like_status'] = '1';
                }
                else
                {
                	$post['like_status'] = '0';
                }
         		$post['like_count'] = $this->db->get_where('post_likes', array('post_id' => $post['id'],'status'=> '1'))->num_rows();
         		$post['comment_count'] = $this->db->get_where('post_comments', array('post_id' => $post['id']))->num_rows();
        		$post['reply_count'] = $this->db->get_where('comment_replies', array('post_id' => $post['id']))->num_rows();
                $coments = $this->User_model->post_comments($post['id']);
                if(!empty($coments))
                {
	            	foreach ($coments as $key => $coment) 
	            	{
						if($coment['comment_user_image'] != '')
		                {
		                    $coment['comment_user_image'] = base_url().'uploads/users/'.$coment['comment_user_image'];
		                }
		                else
		                {
		                  $coment['comment_user_image'] = "";
		                }
		                $post['comment_list'][] = $coment;
	            	}
            	}
            	else
            	{
            		$post['comment_list'] = [];
            	}
            	
             	$message['post_list'][] =$post;           
            }                          
        }
        else
        {
            $message = [
                    'message'=>"لم يتم العثور على مشاركة",
                    'success'=>'0'
                 ];         
        }
        $this->set_response($message, REST_Controller::HTTP_OK);
    }
    public function comment_listWithReplies_post()
    {
        
        $datas=$this->User_model->post_comments($this->input->post('post_id'));
        if(!empty($datas))
        {
            $message = [
                        'message' => 'تم العثور على قائمة التعليقات',
                        'success'=>'1'
                           ];
            foreach($datas as $data)
            {
              
               
                if($data['comment_user_image'] != '')
                {
                    $data['comment_user_image'] = base_url().'uploads/users/'.$data['comment_user_image'];
                }
                else
                {
                  $data['comment_user_image'] = "";
                }
               
                $replies = $this->User_model->comment_replies($data['id']);
                if(!empty($replies))
                {
	            	foreach ($replies as $key => $reply) 
	            	{
						if($reply['reply_user_image'] != '')
		                {
		                    $reply['reply_user_image'] = base_url().'uploads/users/'.$reply['reply_user_image'];
		                }
		                else
		                {
		                  $reply['reply_user_image'] = "";
		                }
		                $data['reply_list'][] = $reply;
	            	}
            	}
            	else
            	{
            		$data['reply_list'] = [];
            	}
            	
             	$message['comment_list'][] =$data;           
            }                          
        }
        else
        {
            $message = [
                    'message'=>"لم يتم العثور على تعليقات",
                    'success'=>'0'
                 ];         
        }
        $this->set_response($message, REST_Controller::HTTP_OK);
    }  
    public function add_teacher_post()
    { 
   		if($this->post())
        {
        	$user =  $this->Common_model->get_data_by_id('users','id',$this->post('user_id'));
        	$school =  $this->Common_model->get_data_by_id('schools','id',$this->post('school_id'));
        	// if(!empty($check_phone))
        	// {
        	// 	 $message = array(		         
	        //     'success'=>'0',
	        //     'message' => 'رقم الهاتف هذا مسجل بالفعل مع شخص آخر',
	        //     );
        	// }
        	// else
        	// {
        		$leader_data = array('phone' => $this->post('leader_phone'));
        		$this->Common_model->update('users',$leader_data,'id',$this->post('leader_id'));

        		$group_data = array('user_id' => $this->post('user_id'),'school_id'=>$this->post('school_id'),'group_name' =>$school['name'],'leader_id' => $this->post('leader_id'),'created'=>date('Y-m-d h:i:s'));
        		$this->Common_model->insert_data($group_data,'groups');
        		$insert_id = $this->db->insert_id();

        		$inbox_data = array('user_id' => $this->post('user_id'),'group_id' => $insert_id,'message'=>$user['name'].' إضافة معلم جديد ','created'=>date('Y-m-d h:i:s'));

        		 $this->Common_model->insert_data($inbox_data,'inbox');
        		$this->Common_model->insert_data($inbox_data,'conversation');
        		foreach($this->post('subject_id') as $key => $subject_id)
        		{
        			$otp =  $this->Common_model->generate_token(); 
		            $data = array(
		            'forigen_id' => $this->post('user_id'),
		            'school_id' => $this->post('school_id'),
		            'leader_id' => $this->post('leader_id'),
		            'subject_id' => $subject_id,
		            'class_id' => $this->post('class_id')[$key],
		            'name' => trim($this->post('name')[$key]),
		            'otp'=>$otp,
		            'phone' => $this->post('phone')[$key],
		            'user_type' => 'teacher',
		            'created' => date('Y-m-d h:i:s'),
	                );

		            $query =  $this->Common_model->insert_data($data,'users');
		            $member_id = $this->db->insert_id();
		             $member_data = array(
		            'group_id' => $insert_id,
		            'member_id' =>  $member_id,
		            'created' => date('Y-m-d h:i:s'),
	                );

		            $query =  $this->Common_model->insert_data($member_data,'group_members');

		        }
		        $message = array(		         
		            'success'=>'1',
		            'message' => 'تمت إضافة المعلمين بنجاح',
		            'group_id' => $insert_id,
		         );
	        //}
	         
		}               
        else
        {
       		$message = array(
            'message' => 'please enter parameters',
            'success'=>'0' 
            );
        }
         $this->set_response($message, REST_Controller::HTTP_OK);     
    }
    public function  add_moshref_post()
    { 
   		if($this->post())
        {
        	$check_phone = $this->Common_model->get_data_by_id('users','phone',$this->post('phone'));
        	if(!empty($check_phone))
        	{
        		 $message = array(		         
	            'success'=>'0',
	            'message' => 'رقم الهاتف هذا مسجل بالفعل مع شخص آخر!',
	         );
        	}
        	else
        	{
	            $data = array(
	            'name' => trim($this->post('name')),
	            'phone' => $this->post('phone'),
	            'user_type' => 'moshref',
	            'created' => date('Y-m-d h:i:s'),
	            );        
		        $query =  $this->Common_model->insert_data($data,'users');
		         $message = array(		         
		            'success'=>'1',
		            'message' => 'تمت إضافة مشرف بنجاح',
		         );
	        }
	         
		}               
        else
        {
       		$message = array(
            'message' => 'please enter parameters',
            'success'=>'0' 
            );
        }
         $this->set_response($message, REST_Controller::HTTP_OK);     
    }
    public function post_create_post()
    { 
   		if($this->post())
        {
        	$name = "";
        	$thumbnail_name = "";
        	if(isset($_FILES["attachment"]))
            {
          
                $name= time().'_'.$_FILES["attachment"]["name"];
                $tmp_name=$_FILES["attachment"]["tmp_name"];
                $error=$_FILES["attachment"]["error"];
                $path='uploads/post/'.$name;
                move_uploaded_file($tmp_name,$path);
                
            if($this->post('type') == 'video')
            {
            	  $thumbnail_name= time().'_'.$_FILES["thumbnail"]["name"];
                $tmp_name=$_FILES["thumbnail"]["tmp_name"];
                $error=$_FILES["thumbnail"]["error"];
                $paths='uploads/post/thumbnail/'.$thumbnail_name;
                move_uploaded_file($tmp_name,$paths);

            }
            }        	
            $data = array(
            'user_id' => $this->post('user_id'),
            'title' => trim($this->post('title')),
            'type' => $this->post('type'),
            'attachment' => $name,
            'location' => $this->post('location'),
            'latitude' => $this->post('latitude'),
            'longitude' => $this->post('longitude'),
            'thumbnail' => $thumbnail_name,
            'created' => date('Y-m-d h:i:s'),
            );        
	        $query =  $this->Common_model->insert_data($data,'posts');
	         $message = array(		         
	            'success'=>'1',
	            'message' => 'مشاركة جديدة تم إنشاؤها',
	         );
		}               
        else
        {
       		$message = array(
            'message' => 'please enter parameters',
            'success'=>'0' 
            );
        }
         $this->set_response($message, REST_Controller::HTTP_OK);     
    }
    public function post_likeOrUnlike_post()
    { 
      if($this->post())
      { 
       
       $check_like =  $this->db->get_where('post_likes', array('post_id' => $this->post('post_id'),'user_id' => $this->post('user_id')))->row_array();
        if($check_like['status'] == '0')
        {
          $status = '1';
        }
        else
        {
          $status = '0';
        }       
          if(!empty($check_like))
          {
            
              $data = array(
              'user_id' => $this->post('user_id'),
              'post_id' => $this->post('post_id'),
              'status' => $status,
              );
              $update = $this->Common_model->update('post_likes',$data,'id',$check_like['id']);
          }             
          else
          {
             $data = array(
              'user_id' => $this->post('user_id'),
              'post_id' => $this->post('post_id'),
              'status' => '1',
              'created' => date('y-m-d h:i:s')
              );
              $insert = $this->db->insert('post_likes', $data);
              $insert_id = $this->db->insert_id();
               }
              if(empty($check_like))
              {
              		$like_user_detail = $this->Common_model->get_data_by_id('users','id',$this->post('user_id'));
                    $post_detail = $this->Common_model->get_data_by_id('posts','id',$this->post('post_id'));
                    $post_user_detail = $this->Common_model->get_data_by_id('users','id',$post_detail['user_id']);
                    $notify_message = $like_user_detail['name'].' أعجبك مشاركتك';
                    if($this->post('user_id') != $post_user_detail['id'])
                    {
                    $this->send_notification($post_detail['id'],$post_user_detail['id'],$this->post('user_id'),$post_user_detail['reg_id'],$notify_message,'post_like');
                    }
                    $message = 'post like successfully';
              }
              else
              {
                if($status == '0')
                {
                  $message = 'post unlike successfully';
                }
                else
                {
                    $like_user_detail = $this->Common_model->get_data_by_id('users','id',$this->post('user_id'));
                    $post_detail = $this->Common_model->get_data_by_id('posts','id',$this->post('post_id'));
                    $post_user_detail = $this->Common_model->get_data_by_id('users','id',$post_detail['user_id']);
                    $notify_message = $like_user_detail['name'].' أعجبك مشاركتك';
                    if($this->post('user_id') != $post_user_detail['id'])
                    {
                    $this->send_notification($post_detail['id'],$post_user_detail['id'],$this->post('user_id'),$post_user_detail['reg_id'],$notify_message,'post_like');
                    }

                  $message = 'post like successfully';
                }
              }
              $post['like_count'] = $this->db->get_where('post_likes', array('post_id' => $this->post('post_id'),'status'=> '1'))->num_rows();
              $successmessage = array(             
                'success'=>'1',
                'message' => $message,
                'like_status'=>$status,
                'like_count'=>$post['like_count']
              );
             $this->set_response($successmessage, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
            
          }
      
        else
        {
          $message = array(
            'message' => 'please enter parameters',
            'success'=>'0' 
            );
            $this->set_response($message, REST_Controller::HTTP_OK); // CREATED (201) being the HTTP response code 
        }     
    }

    public function rating_teacher_post()
    { 
   		if($this->post()) 
        {

        	 $question1 = $this->Common_model->get_data_by_id('rating_questions','id',$this->post('question_id')[0]);
        	 $question2 = $this->Common_model->get_data_by_id('rating_questions','id',$this->post('question_id')[1]);
        	 $question3 = $this->Common_model->get_data_by_id('rating_questions','id',$this->post('question_id')[2]);
        	 $teacher = $this->Common_model->get_data_by_id('users','id',$this->post('teacher_id'));
        	 $leader = $this->Common_model->get_data_by_id('users','id',$teacher['leader_id']);
             $user = $this->Common_model->get_data_by_id('users','id', $this->post('user_id'));
           
		   $query = $this->db->order_by('id', 'DESC')->get_where('groups', array('user_id' => $this->post('user_id'),'school_id'=>$teacher['school_id'],'leader_id'=> $teacher['leader_id']));
                $group_details = $query->row_array();

                 $query = $this->db->get_where('inbox', array('group_id' =>$group_details['id']));
                $inbox = $query->row_array();


            $inbox_data = array('user_id' => $this->post('user_id'),'group_id' => $group_details['id'],'message'=>$user['name'].' هذا '.$teacher['name'],'created'=>date('Y-m-d h:i:s')); 	
           
	         $id = $inbox['id'];
                $where = "id = $id";
				$this->db->where($where);
				$this->db->update('inbox',$inbox_data);

               $notify_message = $user['name']." هذا ".$teacher['name']."\n\n".$question1['question']." :  جيد"."\n".$question2['question']." :  عدل"."\n".$question3['question'].' : فقير'."\n\n\n\n".$this->post('review');

	       
	        $conversation_data = array('user_id' => $this->post('user_id'),'group_id' => $group_details['id'],'message'=>$notify_message,'created'=>date('Y-m-d h:i:s')); 
            $this->Common_model->insert_data($conversation_data,'conversation');
            $message_id = $this->db->insert_id();

		     $unread_data = array('user_id'=>$this->post('user_id'),'group_id' => $group_details['id'],'member_id'=>$this->post('teacher_id'),'message_id'=>$message_id);
		     $this->Common_model->insert_data($unread_data,'unread_messages');
             
		
            $this->send_chat_notification($this->post('user_id'),$teacher['id'],$group_details['id'],$teacher['reg_id'],$notify_message,'chat');
            $this->send_chat_notification($this->post('user_id'),$leader['id'],$group_details['id'],$leader['reg_id'],$notify_message,'chat');
        	foreach($this->post('question_id') as $key => $question_id) {
        		
	            $data = array(
	            'user_id' => $this->post('user_id'),
	            'teacher_id' => $this->post('teacher_id'), 
	            
	            'review' => trim($this->post('review')),
	            'rating' => $this->post('rating')[$key],
	            'created' => date('Y-m-d h:i:s'),
	            'question_id' => $question_id
	            );        
		        $query =  $this->Common_model->insert_data($data,'teacher_rating');
		    }
		         $message = array(		         
		            'success'=>'1',
		            'message' => 'تم تقديم تقييم المعلم',
		            'group_id' => $group_details['id']
		         );
	       
		}               
        else
        {
       		$message = array(
            'message' => 'please enter parameters',
            'success'=>'0' 
            );
        }
         $this->set_response($message, REST_Controller::HTTP_OK);     
    }
    
    public function post_comment_post()
    { 
   		if($this->post()) 
        {
        	
            $data = array(
            'user_id' => $this->post('user_id'),
            'post_id' => $this->post('post_id'),             
            'comment' => trim($this->post('comment')),
            'created' => date('Y-m-d h:i:s')
            );        
	        $query =  $this->Common_model->insert_data($data,'post_comments');
	        
	        $comment_user_detail = $this->Common_model->get_data_by_id('users','id',$this->post('user_id'));
            $post_detail = $this->Common_model->get_data_by_id('posts','id',$this->post('post_id'));
            $post_user_detail = $this->Common_model->get_data_by_id('users','id',$post_detail['user_id']);
            $notify_message = $comment_user_detail['name'].' علق على مشاركتك';
            if($this->post('user_id') != $post_user_detail['id'])
            {
            $this->send_notification($post_detail['id'],$post_user_detail['id'],$this->post('user_id'),$post_user_detail['reg_id'],$notify_message,'post_like');
	        }
	        $message = array(		         
	            'success'=>'1',
	            'message' => 'علق!',
	         );	       
		}               
        else
        {
       		$message = array(
            'message' => 'please enter parameters',
            'success'=>'0' 
            );
        }
        $this->set_response($message, REST_Controller::HTTP_OK);     
    }
    public function comment_reply_post()
    { 
   		if($this->post()) 
        {
        	
            $data = array(
            'user_id' => $this->post('user_id'),
            'post_id' => $this->post('post_id'), 
            'comment_id' => $this->post('comment_id'),            
            'reply' => trim($this->post('reply')),
            'created' => date('Y-m-d h:i:s')
            );        
	        $query =  $this->Common_model->insert_data($data,'comment_replies');
	        $message = array(		         
	            'success'=>'1',
	            'message' => 'أجاب',
	         );	       
		}               
        else
        {
       		$message = array(
            'message' => 'please enter parameters',
            'success'=>'0' 
            );
        }
         $this->set_response($message, REST_Controller::HTTP_OK);     
    }
    public function contact_us_post()
    { 
   		if($this->post()) 
        {
        	
            $data = array(
            'user_id' => $this->post('user_id'),
            'name' => $this->post('name'),             
            'message' => trim($this->post('message')),
            'created' => date('Y-m-d h:i:s')
            );        
	        $query =  $this->Common_model->insert_data($data,'contactus');
	        $message = array(		         
	            'success'=>'1',
	            'message' => 'شكر! سوف نعود اليك قريبا',
	         );	       
		}               
        else
        {
       		$message = array(
            'message' => 'please enter parameters',
            'success'=>'0' 
            );
        }
         $this->set_response($message, REST_Controller::HTTP_OK);     
    }
   
    
    public function add_plan_post()
    { 
   		if($this->post())
        {

            $teacher = $this->Common_model->get_data_by_id('users','id',$this->post('teacher_id')[0]);
            $user = $this->Common_model->get_data_by_id('users','id', $this->post('user_id'));
           
            $query = $this->db->order_by('id', 'DESC')->get_where('groups', array('user_id' => $this->post('user_id'),'school_id'=>$teacher['school_id'],'leader_id'=> $teacher['leader_id']));
                $group_details = $query->row_array();

                 $query = $this->db->get_where('inbox', array('group_id' =>$group_details['id']));
                $inbox = $query->row_array();

            $inbox_data = array('user_id' => $this->post('user_id'),'group_id' => $group_details['id'],'message'=>' أضاف '.$user['name'].' خطة جديدة مع '.$teacher['name'].' بتاريخ '.$this->post('plan_date')[0],'created'=>date('Y-m-d h:i:s'));

                $id = $inbox['id'];
                $where = "id = $id";
				$this->db->where($where);
				$this->db->update('inbox',$inbox_data);

        	foreach ($this->post('teacher_id') as $key => $teacher_id) {
        		  $data = array(
        		'user_id' => $this->post('user_id'), 	
	            'teacher_id' => $teacher_id,
	            'plan_date' => $this->post('plan_date')[$key],       
	            'created' => date('Y-m-d h:i:s')
	            );

		        $query =  $this->Common_model->insert_data($data,'plans');
		        $plan_id = $this->db->insert_id();    
                $teacher_detail = $this->Common_model->get_data_by_id('users','id',$teacher_id); 		            
		        $conversation_data = array('plan_id'=>$plan_id,'user_id' => $this->post('user_id'),'group_id' => $group_details['id'],'message'=>' أضاف '.$user['name'].' خطة جديدة مع '.$teacher_detail['name'].' بتاريخ '.$this->post('plan_date')[$key],'created'=>date('Y-m-d h:i:s')); 

            $this->Common_model->insert_data($conversation_data,'conversation');
            $message_id = $this->db->insert_id();

		     $unread_data = array('user_id'=>$this->post('user_id'),'group_id' => $group_details['id'],'member_id'=>$teacher_id,'message_id'=>$message_id);
		     $this->Common_model->insert_data($unread_data,'unread_messages');
             
			$notify_message = ' أضاف '.$user['name'].' خطة جديدة مع '.$teacher_detail['name'].' بتاريخ '.$this->post('plan_date')[$key];
           //  $notify_message = $this->post('plan_date')[$key].'بتاريخ '.$teacher_detail['name'].' خطة جديدة مع '.$user['name'].' أضاف ';
             
             $data =  $this->send_chat_notification($this->post('user_id'),$teacher_detail['id'],$group_details['id'],$teacher_detail['reg_id'],$notify_message,'chat');
        	}
	          
		         $message = array(		         
		            'success'=>'1',
		            'message' => 'تمت إضافة خطة جديدة',
		            'group_id' =>$group_details['id'],
		         );
	       
		}               
        else
        {
       		$message = array(
            'message' => 'please enter parameters',
            'success'=>'0' 
            );
        }
         $this->set_response($message, REST_Controller::HTTP_OK);     
    }
    public function update_group_post()
    {
    	if($this->post())
        {
	    	$id=$this->post('group_id');
		    $data = array('group_name' => $this->post('group_name'));		   
		    $update = $this->Common_model->update('groups',$data,'id',$id);
		    if($update)
		    {		       
	    		$data['message'] = 'تحديث المجموعة بنجاح.';
	    		$data['success'] = '1';	  
		        $this->set_response($data, REST_Controller::HTTP_OK);
			}
			else
		    {
		    	$message = array(
		            'message' => 'some error occured', // Automatically generated by the model 
		            );
		            $this->set_response($message, REST_Controller::HTTP_NOT_FOUND);
			}			   
        }
        else
        {
        	$message = array(
            'message' => 'please enter parameters', // Automatically generated by the model 
            );
            $this->set_response($message, REST_Controller::HTTP_NOT_FOUND);
        }
    }
     public function request_for_plan_change_post()
    {
    	if($this->post())
        {
	    	$id=$this->post('plan_id');
	    	$user_id=$this->post('user_id');
		    
		    $conversation = $this->Common_model->get_data_by_id('conversation','plan_id',$id);
		    $user = $this->Common_model->get_data_by_id('users','id',$user_id);
		    $plan_detail = $this->Common_model->get_data_by_id('plans','id',$id);
           $plan_user_detail = $this->Common_model->get_data_by_id('users','id',$plan_detail['user_id']);
           if(!empty($plan_user_detail['image']))
           {
           	    $image = base_url().'uploads/users/'.$plan_user_detail['image'];
           }
           else
           {
           		$image = "";
           }
           $notify_message = "طلب تغيير الخطة";

           $dateObj = DateTime::createFromFormat('d/m/y', $this->post('plan_date'));
	        $date =  $dateObj->format('d M');
		    $this->send_request_notification($this->post('user_id'),$plan_detail['user_id'],$conversation['group_id'],$plan_user_detail['reg_id'],$notify_message,'request',$image,$date,$plan_user_detail['name']);

		        $conversation_data = array('plan_id'=>$id,'user_id' => $this->post('user_id'),'group_id' => $conversation['group_id'],'message'=>'أضاف '.$user['name'].' تأجيل الخطة هذا '.$this->post('plan_date'),'created'=>date('Y-m-d h:i:s')); 
            
            $query = $this->db->get_where('inbox', array('group_id' =>$conversation['group_id']));
            $inbox = $query->row_array();

            $inbox_data = array('user_id' => $this->post('user_id'),'group_id' => $conversation['group_id'],'message'=>'أضاف '.$user['name'].' طلب خطة التغيير لهذا '.$this->post('plan_date'),'created'=>date('Y-m-d h:i:s'));

                $id = $inbox['id'];
                $where = "id = $id";
				$this->db->where($where);
				$this->db->update('inbox',$inbox_data);
            $this->Common_model->insert_data($conversation_data,'conversation');
            $message_id = $this->db->insert_id();
            
             $members = $this->db->get_where('group_members', array('group_id' => $conversation['group_id']))->result_array();
                foreach ($members as $key => $member) {
                	 $unread_data = array('user_id'=>$this->post('user_id'),'group_id' => $conversation['id'],'member_id'=>$member['id'],'message_id'=>$message_id);
				     $this->Common_model->insert_data($unread_data,'unread_messages');
		              $member_detail = $this->Common_model->get_data_by_id('users','id',$member['id']);
					$notify_message = 'أضاف '.$user['name'].'  طلب خطة التغيير لهذا '.$this->post('plan_date');
		           //  $notify_message = $this->post('plan_date')[$key].'بتاريخ '.$teacher_detail['name'].' خطة جديدة مع '.$user['name'].' أضاف ';
		     
                }

           
		  		       
	    		$data['message'] = 'طلب إرسال بنجاح.';
	    		$data['group_id'] = $conversation['group_id'];
	    		$data['success'] = '1';	  
		        $this->set_response($data, REST_Controller::HTTP_OK);
			   
        }
        else
        {
        	$message = array(
            'message' => 'please enter parameters', // Automatically generated by the model 
            );
            $this->set_response($message, REST_Controller::HTTP_NOT_FOUND);
        }
    }
    public function update_plan_post()
    {
    	if($this->post())
        {
	    	$id=$this->post('plan_id');
	    	$user_id=$this->post('user_id');
		    $data = array('plan_date' => $this->post('plan_date'));		   
		    $update = $this->Common_model->update('plans',$data,'id',$id);
		    $conversation = $this->Common_model->get_data_by_id('conversation','plan_id',$id);
		     $user = $this->Common_model->get_data_by_id('users','id',$user_id);
		        $conversation_data = array('plan_id'=>$id,'user_id' => $this->post('user_id'),'group_id' => $conversation['group_id'],'message'=>'أضاف '.$user['name'].' تأجيل الخطة هذا '.$this->post('plan_date'),'created'=>date('Y-m-d h:i:s')); 
            
            $query = $this->db->get_where('inbox', array('group_id' =>$conversation['group_id']));
            $inbox = $query->row_array();

            $inbox_data = array('user_id' => $this->post('user_id'),'group_id' => $conversation['group_id'],'message'=>'أضاف '.$user['name'].' تأجيل الخطة هذا '.$this->post('plan_date'),'created'=>date('Y-m-d h:i:s'));

                $id = $inbox['id'];
                $where = "id = $id";
				$this->db->where($where);
				$this->db->update('inbox',$inbox_data);
            $this->Common_model->insert_data($conversation_data,'conversation');
            $message_id = $this->db->insert_id();
            
             $members = $this->db->get_where('group_members', array('group_id' => $conversation['group_id']))->result_array();
                foreach ($members as $key => $member) {
                	 $unread_data = array('user_id'=>$this->post('user_id'),'group_id' => $conversation['id'],'member_id'=>$member['id'],'message_id'=>$message_id);
				     $this->Common_model->insert_data($unread_data,'unread_messages');
		              $member_detail = $this->Common_model->get_data_by_id('users','id',$member['id']);
					$notify_message = 'أضاف '.$user['name'].' تأجيل الخطة هذا '.$this->post('plan_date');
		           //  $notify_message = $this->post('plan_date')[$key].'بتاريخ '.$teacher_detail['name'].' خطة جديدة مع '.$user['name'].' أضاف ';
		             
		            $this->send_chat_notification($this->post('user_id'),$member['member_id'],$conversation['group_id'],$member_detail['reg_id'],$notify_message,'chat');
                }

           
		    if($update) 
		    {		       
	    		$data['message'] = 'تحديث الخطة بنجاح.';
	    		$data['group_id'] = $conversation['group_id'];
	    		$data['success'] = '1';	  
		        $this->set_response($data, REST_Controller::HTTP_OK);
			}
			else
		    {
		    	$message = array(
		            'message' => 'some error occured', // Automatically generated by the model 
		            );
		            $this->set_response($message, REST_Controller::HTTP_NOT_FOUND);
			}			   
        }
        else
        {
        	$message = array(
            'message' => 'please enter parameters', // Automatically generated by the model 
            );
            $this->set_response($message, REST_Controller::HTTP_NOT_FOUND);
        }
    }
    public function send_message_post()
    {
   		if($this->post())
        {	        
	        $data = [
            'user_id' => $this->post('user_id'),
            'group_id' => $this->post('group_id'),
            'message' => $this->post('message'),
            'created'=>date('y-m-d h:i:s')
	        ];

	        $inbox=$this->User_model->check_inbox($this->post('group_id'));
			if($inbox['id'] == '')
			{
				$this->Common_model->insert_data($data,'inbox');
			}
			else
			{
				$id = $inbox['id'];
                $where = "id = $id";
				$this->db->where($where);
				$this->db->update('inbox',$data);
			}
			$this->Common_model->insert_data($data,'conversation');
            $insert_id = $this->db->insert_id();

            $details = $this->User_model->member_list($this->post('group_id'));
            $group_detail = $this->Common_model->get_data_by_id('groups','id',$this->post('group_id'));
            $sender_detail = $this->Common_model->get_data_by_id('users','id',$this->post('user_id'));
            foreach ($details as $key => $detail) {

            	//echo $detail['reg_id'].'<br>';
            $unread_data = array('user_id'=>$this->post('user_id'),'group_id' => $this->post('group_id'),'member_id'=>$detail['id'],'message_id'=>$insert_id);
            $this->Common_model->insert_data($unread_data,'unread_messages');
             $notify_message = $sender_detail['name']. ' send a message in a group';
             $data =  $this->send_chat_notification($this->post('user_id'),$detail['id'],$this->post('group_id'),$detail['reg_id'],$notify_message,'chat');
            
            }//die;
            if($this->post('user_id') != $group_detail['user_id'])
            {
            	$group_admin_detail = $this->Common_model->get_data_by_id('users','id',$group_detail['user_id']);
               //echo $group_admin_detail['reg_id'];die;
            	$notify_message = $sender_detail['name']. ' send a message in a group';
            	$this->send_chat_notification($this->post('user_id'),$group_admin_detail['id'],$this->post('group_id'),$group_admin_detail['id'],$group_admin_detail['reg_id'],$notify_message,'chat');
            	$unread_data = array('user_id'=>$this->post('user_id'),'member_id' => $group_admin_detail['id'],'group_id' => $this->post('group_id'),'message_id'=>$insert_id);
                $this->Common_model->insert_data($unread_data,'unread_messages');
            	
            	
            }

            $unread_data = array('user_id'=>$this->post('user_id'),'member_id' => $group_detail['leader_id'],'group_id' => $this->post('group_id'),'message_id'=>$insert_id);
                $this->Common_model->insert_data($unread_data,'unread_messages');
			
			$message = [
            'message' => 'تم الارسال',
            'success'=>'1'
            ]; 

        }  
        else
        {
       		$message = [
            'message' => 'please enter parameters',
            'success'=>'0'
            ];           
        }
        $this->set_response($message, REST_Controller::HTTP_OK);
    }
    public function send_chat_notification($sender_id,$user_id,$group_id,$token,$message,$type)
    {
    	//echo $type;die;
         $GOOGLE_API_KEY = "AAAABHI67HY:APA91bFvWsyPQH4QFJQsYzf7HTLN8mvS8vxIBUAgNoA5SHvg5nifpPEhmIFIFI3mpSkh7rTSt0X5Smx6dVREDOeMMY83c3DqOB6BIRD6aXUrw9v7JOirN5yM5EADQeT_wJWH-4WDiY4P";
		  $GOOGLE_FCM_URL= "https://fcm.googleapis.com/fcm/send";
		  
	      
	    		 $data = array (
		           
		            "title"=>'Moshref notifications',
                    "message" => $message,
                    'group_id' =>$group_id,
                    "click_action" =>"OPEN_ACTIVITY_1",
                    "type" => $type,
                    "smallIcon" => "noti_icon",
                    "largeIcon"=>"app_icon",
                    "sound" => "TYPE_NOTIFICATION",
		            );

		        $fields = array(
								'to' =>  $token,
								'priority'=> "high",
								'data' => $data
							);
							//echo json_encode($fields);die;
					$headers = array(
								'Authorization: key=' . $GOOGLE_API_KEY,
								'Content-Type: application/json'
						   );
				$ch = curl_init();
				curl_setopt($ch, CURLOPT_URL, $GOOGLE_FCM_URL);
				curl_setopt($ch, CURLOPT_POST, true);
				curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
				curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
				curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
				curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($fields));
				$result = curl_exec($ch);
				if($result === FALSE)
				{
				   die('Problem occurred: ' . curl_error($ch));
				}
				curl_close($ch);
			   //echo $result;die; 
				$data = [
			            'user_id' => $user_id,
			            'forigen_id' => $group_id,
			            'sender_id'=>$sender_id,
			            'message' => $message,
			            'type' => $type,
			            'created'=>date('y-m-d h:i:s')
				        ];
				$this->Common_model->insert_data($data,'notifications');
				return true;
	
    }
    
    public function send_request_notification($post_id,$user_id,$sender_id,$token,$message,$type,$image,$date,$name)
    {
    	//echo "hello";die;
          define("GOOGLE_API_KEY", "AAAABHI67HY:APA91bFvWsyPQH4QFJQsYzf7HTLN8mvS8vxIBUAgNoA5SHvg5nifpPEhmIFIFI3mpSkh7rTSt0X5Smx6dVREDOeMMY83c3DqOB6BIRD6aXUrw9v7JOirN5yM5EADQeT_wJWH-4WDiY4P");
		  define("GOOGLE_FCM_URL", "https://fcm.googleapis.com/fcm/send");
		  
	      
	    		 $data = array (
		           
		            "title"=>'Moshref notifications',
                    "message" => $message,
                    'post_id' =>$post_id,
                    "click_action" =>"OPEN_ACTIVITY_1",
                    "type" => $type,
                    'user_imae'=>$image,
                    'user_name' => $name,
                    'plan_date' => $date,
                    "smallIcon" => "noti_icon",
                    "largeIcon"=>"app_icon",
                    "sound" => "TYPE_NOTIFICATION",
		            );

		        $fields = array(
								'to' =>  $token,
								'priority'=> "high",
								'data' => $data
							);
							//echo json_encode($fields);die;
				$headers = array(
								'Authorization: key=' . GOOGLE_API_KEY,
								'Content-Type: application/json'
						   );
				$ch = curl_init();
				curl_setopt($ch, CURLOPT_URL, GOOGLE_FCM_URL);
				curl_setopt($ch, CURLOPT_POST, true);
				curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
				curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
				curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
				curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($fields));
				$result = curl_exec($ch);
				if($result === FALSE)
				{
				   die('Problem occurred: ' . curl_error($ch));
				}
				curl_close($ch);
			  // echo $result;die;

				$data = [
			            'user_id' => $user_id,
			            'forigen_id' => $post_id,
			            'sender_id' => $sender_id,
			            'message' => $message,
			            'type' => $type,
			            'created'=>date('y-m-d h:i:s')
				        ];
				$this->Common_model->insert_data($data,'notifications');
				return true;
	
    }

    public function send_notification($post_id,$user_id,$sender_id,$token,$message,$type)
    {
    	//echo "hello";die;
          define("GOOGLE_API_KEY", "AAAABHI67HY:APA91bFvWsyPQH4QFJQsYzf7HTLN8mvS8vxIBUAgNoA5SHvg5nifpPEhmIFIFI3mpSkh7rTSt0X5Smx6dVREDOeMMY83c3DqOB6BIRD6aXUrw9v7JOirN5yM5EADQeT_wJWH-4WDiY4P");
		  define("GOOGLE_FCM_URL", "https://fcm.googleapis.com/fcm/send");
		  
	      
	    		 $data = array (
		           
		            "title"=>'Moshref notifications',
                    "message" => $message,
                    'post_id' =>$post_id,
                    "click_action" =>"OPEN_ACTIVITY_1",
                    "type" => $type,
                    "smallIcon" => "noti_icon",
                    "largeIcon"=>"app_icon",
                    "sound" => "TYPE_NOTIFICATION",
		            );

		        $fields = array(
								'to' =>  $token,
								'priority'=> "high",
								'data' => $data
							);
							//echo json_encode($fields);die;
				$headers = array(
								'Authorization: key=' . GOOGLE_API_KEY,
								'Content-Type: application/json'
						   );
				$ch = curl_init();
				curl_setopt($ch, CURLOPT_URL, GOOGLE_FCM_URL);
				curl_setopt($ch, CURLOPT_POST, true);
				curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
				curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
				curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
				curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($fields));
				$result = curl_exec($ch);
				if($result === FALSE)
				{
				   die('Problem occurred: ' . curl_error($ch));
				}
				curl_close($ch);
			  // echo $result;die;

				$data = [
			            'user_id' => $user_id,
			            'forigen_id' => $post_id,
			            'sender_id' => $sender_id,
			            'message' => $message,
			            'type' => $type,
			            'created'=>date('y-m-d h:i:s')
				        ];
				$this->Common_model->insert_data($data,'notifications');
				return true;
	
    }

  
}
